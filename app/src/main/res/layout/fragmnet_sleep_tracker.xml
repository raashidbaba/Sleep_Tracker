<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Data to make available to the XML via data binding. In this case,
         the whole ViewModel, so that we can access the LiveData,
         click handlers, and state variables. -->
    <data>

<variable
    name="sleepTrackerViewModel"
    type="com.example.sleeptracker.sleepTracker.SleepTrackerViewModel" />
    </data>

    <!-- Start of the visible fragment layout using ConstraintLayout -->
    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".sleeptracker.SleepTrackerFragment">

        <!-- Simplest way of displaying scrollable text and data. There is a
             better and more efficient way to do this, and you will learn about
             RecyclerView in a later lesson. -->

        <androidx.recyclerview.widget.RecyclerView
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:padding="8dp"
            android:layout_marginLeft="5dp"
            android:layout_marginRight="5dp"
            app:layout_constraintBottom_toTopOf="@+id/clear_button"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/stop_button"/>

            <!-- In the TextView, we can access the nightsString LiveData,
                 which keeps it displayed and updated in the TextView
                 whenever it changes. -->

            <TextView
                android:id="@+id/textview"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="20sp"
                android:textStyle="bold"
                android:textColor="@color/black"
                android:text="@{sleepTrackerViewModel.nightsString}"
                tools:ignore="MissingConstraints" />


        <!-- With data binding and LiveData, we can track the buttons' visibility states
             from the ViewModel. The click handler is in the ViewModel as well, and
             you can set it for the Views using this lambda pattern. -->

        <androidx.appcompat.widget.AppCompatButton
            android:id="@+id/start_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/start"
            android:background="@color/teal_200"
            app:layout_constraintBaseline_toBaselineOf="@id/stop_button"
            app:layout_constraintEnd_toStartOf="@+id/stop_button"
            app:layout_constraintHorizontal_chainStyle="spread"
            app:layout_constraintStart_toStartOf="parent"
            android:onClick="@{() -> sleepTrackerViewModel.onStartTracking()}"
            android:enabled="@{sleepTrackerViewModel.startButtonVisible}"/>

        <androidx.appcompat.widget.AppCompatButton
            android:id="@+id/stop_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/stop"
            android:background="@color/teal_200"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toEndOf="@+id/start_button"
            app:layout_constraintTop_toTopOf="parent"
            android:onClick="@{() -> sleepTrackerViewModel.onStopTraking()}"
            android:enabled="@{sleepTrackerViewModel.stopButtonVisible}"/>

        <androidx.appcompat.widget.AppCompatButton
            android:id="@+id/clear_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/clear"
            android:background="@color/teal_200"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            android:onClick="@{() -> sleepTrackerViewModel.onClear()}"
            android:enabled="@{sleepTrackerViewModel.clearButtonVisible}"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>